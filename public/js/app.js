/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n(function () {\n  'use strict';\n\n  $(document).on('change', '.datatable-filter [data-filter=\"select\"]', function () {\n    window.renderedDataTable.ajax.reload(null, false);\n  });\n  $(document).on('input', '.dt-search', function () {\n    window.renderedDataTable.ajax.reload(null, false);\n  });\n  var confirmSwal = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(message) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Swal.fire({\n              title: message,\n              icon: 'question',\n              showCancelButton: true,\n              confirmButtonColor: '#d33',\n              cancelButtonColor: '#858482',\n              confirmButtonText: 'Yes, do it!',\n              showClass: {\n                popup: 'animate__animated animate__zoomIn'\n              },\n              hideClass: {\n                popup: 'animate__animated animate__zoomOut'\n              },\n              reverseButtons: true\n            }).then(function (result) {\n              return result;\n            });\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function confirmSwal(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  window.confirmSwal = confirmSwal;\n  $('#quick-action-form').on('submit', function (e) {\n    e.preventDefault();\n    var form = $(this);\n    var url = form.attr('action');\n    var message = $('[name=\"message_' + $('[name=\"action_type\"]').val() + '\"]').val();\n    var rowdIds = $('#datatable_wrapper .select-table-row:checked').map(function () {\n      return $(this).val();\n    }).get();\n    confirmSwal(message).then(function (result) {\n      if (!result.isConfirmed) return;\n      callActionAjax({\n        url: \"\".concat(url, \"?rowIds=\").concat(rowdIds),\n        body: form.serialize()\n      });\n      //\n    });\n  });\n\n  // Update status on switch\n  $(document).on('change', '#datatable_wrapper .switch-status-change', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      status: $(this).prop('checked') ? 1 : 0,\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  $(document).on('change', '#datatable_wrapper .change-select', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      value: $(this).val(),\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  function callActionAjax(_ref2) {\n    var url = _ref2.url,\n      body = _ref2.body;\n    $.ajax({\n      type: 'POST',\n      url: url,\n      data: body,\n      success: function success(res) {\n        if (res.status) {\n          window.successSnackbar(res.message);\n          window.renderedDataTable.ajax.reload(resetActionButtons, false);\n          var event = new CustomEvent('update_quick_action', {\n            detail: {\n              value: true\n            }\n          });\n          document.dispatchEvent(event);\n        } else {\n          Swal.fire({\n            title: 'Error',\n            text: res.message,\n            icon: 'error',\n            showClass: {\n              popup: 'animate__animated animate__zoomIn'\n            },\n            hideClass: {\n              popup: 'animate__animated animate__zoomOut'\n            }\n          });\n          // window.errorSnackbar(res.message)\n        }\n      }\n    });\n  }\n\n  // Update status on button click\n  $(document).on('click', '#datatable_wrapper .button-status-change', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      status: 1,\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  function callActionAjax(_ref3) {\n    var url = _ref3.url,\n      body = _ref3.body;\n    $.ajax({\n      type: 'POST',\n      url: url,\n      data: body,\n      success: function success(res) {\n        if (res.status) {\n          window.successSnackbar(res.message);\n          window.renderedDataTable.ajax.reload(resetActionButtons, false);\n          var event = new CustomEvent('update_quick_action', {\n            detail: {\n              value: true\n            }\n          });\n          document.dispatchEvent(event);\n        } else {\n          window.errorSnackbar(res.message);\n        }\n      }\n    });\n  }\n\n  //select row in datatable\n  var dataTableRowCheck = function dataTableRowCheck(id) {\n    checkRow();\n    if ($('.select-table-row:checked').length > 0) {\n      $('#quick-action-form').removeClass('form-disabled');\n      //if at-least one row is selected\n      document.getElementById('select-all-table').indeterminate = true;\n      $('#quick-actions').find('input, textarea, button, select').removeAttr('disabled');\n    } else {\n      //if no row is selected\n      document.getElementById('select-all-table').indeterminate = false;\n      $('#select-all-table').attr('checked', false);\n      resetActionButtons();\n    }\n    if ($('#datatable-row-' + id).is(':checked')) {\n      $('#row-' + id).addClass('table-active');\n    } else {\n      $('#row-' + id).removeClass('table-active');\n    }\n  };\n  window.dataTableRowCheck = dataTableRowCheck;\n  var selectAllTable = function selectAllTable(source) {\n    var checkboxes = document.getElementsByName('datatable_ids[]');\n    for (var i = 0, n = checkboxes.length; i < n; i++) {\n      // if disabled property is given to checkbox, it won't select particular checkbox.\n      if (!$('#' + checkboxes[i].id).prop('disabled')) {\n        checkboxes[i].checked = source.checked;\n      }\n      if ($('#' + checkboxes[i].id).is(':checked')) {\n        $('#' + checkboxes[i].id).closest('tr').addClass('table-active');\n        $('#quick-actions').find('input, textarea, button, select').removeAttr('disabled');\n        if ($('#quick-action-type').val() == '') {\n          $('#quick-action-apply').attr('disabled', true);\n        }\n      } else {\n        $('#' + checkboxes[i].id).closest('tr').removeClass('table-active');\n        resetActionButtons();\n      }\n    }\n    checkRow();\n  };\n  window.selectAllTable = selectAllTable;\n  var checkRow = function checkRow() {\n    if ($('.select-table-row:checked').length > 0) {\n      $('#quick-action-form').removeClass('form-disabled');\n      $('#quick-action-apply').removeClass('btn-gray').addClass('btn-primary');\n    } else {\n      $('#quick-action-form').addClass('form-disabled');\n      $('#quick-action-apply').removeClass('btn-primary').addClass('btn-gray');\n    }\n  };\n  window.checkRow = checkRow;\n\n  //reset table action form elements\n  var resetActionButtons = function resetActionButtons() {\n    checkRow();\n    if (document.getElementById('select-all-table') !== undefined && document.getElementById('select-all-table') !== null) {\n      document.getElementById('select-all-table').checked = false;\n      document.getElementById('select-all-table').indeterminate = false;\n      $('#quick-action-form')[0].reset();\n      $('#quick-actions').find('input, textarea, button, select').attr('disabled', 'disabled');\n      $('#quick-action-form').find('select').select2('destroy').select2().val(null).trigger('change');\n    }\n  };\n  window.resetActionButtons = resetActionButtons;\n  var initDatatable = function initDatatable(_ref4) {\n    var url = _ref4.url,\n      finalColumns = _ref4.finalColumns,\n      advanceFilter = _ref4.advanceFilter,\n      _ref4$drawCallback = _ref4.drawCallback,\n      _drawCallback = _ref4$drawCallback === void 0 ? undefined : _ref4$drawCallback,\n      orderColumn = _ref4.orderColumn;\n    var data_table_limit = $('meta[name=\"data_table_limit\"]').attr('content');\n    window.renderedDataTable = $('#datatable').DataTable({\n      processing: true,\n      serverSide: true,\n      autoWidth: false,\n      responsive: true,\n      fixedHeader: true,\n      lengthMenu: [[5, 10, 15, 20, 25, 100, -1], [5, 10, 15, 20, 25, 100, 'All']],\n      order: orderColumn,\n      pageLength: data_table_limit,\n      language: {\n        processing: window.translations.processing,\n        search: window.translations.search,\n        lengthMenu: window.translations.lengthMenu,\n        info: window.translations.info,\n        infoEmpty: window.translations.infoEmpty,\n        infoFiltered: window.translations.infoFiltered,\n        loadingRecords: window.translations.loadingRecords,\n        zeroRecords: window.translations.zeroRecords,\n        paginate: {\n          first: window.translations.paginate.first,\n          last: window.translations.paginate.last,\n          next: window.translations.paginate.next,\n          previous: window.translations.paginate.previous\n        }\n      },\n      dom: '<\"row align-items-center\"><\"table-responsive my-3 mt-3 mb-2 pb-1\" rt><\"row align-items-center data_table_widgets\" <\"col-md-6\" <\"d-flex align-items-center flex-wrap gap-3\" l i>><\"col-md-6\" p>><\"clear\">',\n      ajax: {\n        type: 'GET',\n        url: url,\n        data: function data(d) {\n          d.search = {\n            value: $('.dt-search').val()\n          };\n          d.filter = {\n            column_status: $('#column_status').val()\n          };\n          if (typeof advanceFilter == 'function' && advanceFilter() !== undefined) {\n            d.filter = _objectSpread(_objectSpread({}, d.filter), advanceFilter());\n          }\n        }\n      },\n      drawCallback: function drawCallback() {\n        if (laravel !== undefined) {\n          window.laravel.initialize();\n        }\n        $('.select2').select2({\n          width: '100%'\n        });\n        if (_drawCallback !== undefined && typeof _drawCallback == 'function') {\n          _drawCallback();\n        }\n      },\n      columns: finalColumns\n    });\n  };\n  window.initDatatable = initDatatable;\n  function formatCurrency(number, noOfDecimal, decimalSeparator, thousandSeparator, currencyPosition, currencySymbol) {\n    // Convert the number to a string with the desired decimal places\n    var formattedNumber = parseFloat(number).toFixed(noOfDecimal);\n\n    // Split the number into integer and decimal parts\n    var _formattedNumber$spli = formattedNumber.split('.'),\n      _formattedNumber$spli2 = _slicedToArray(_formattedNumber$spli, 2),\n      integerPart = _formattedNumber$spli2[0],\n      decimalPart = _formattedNumber$spli2[1];\n\n    // Add thousand separators to the integer part\n    integerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n\n    // Set decimalPart to an empty string if it is undefined\n    decimalPart = decimalPart || '';\n\n    // Construct the final formatted currency string\n    var currencyString = '';\n    if (currencyPosition === 'left' || currencyPosition === 'left_with_space') {\n      currencyString += currencySymbol;\n      if (currencyPosition === 'left_with_space') {\n        currencyString += ' ';\n      }\n      currencyString += integerPart;\n      // Add decimal part and decimal separator if applicable\n      if (noOfDecimal > 0) {\n        currencyString += decimalSeparator + decimalPart;\n      }\n    }\n    if (currencyPosition === 'right' || currencyPosition === 'right_with_space') {\n      // Add decimal part and decimal separator if applicable\n      if (noOfDecimal > 0) {\n        currencyString += integerPart + decimalSeparator + decimalPart;\n      }\n      if (currencyPosition === 'right_with_space') {\n        currencyString += ' ';\n      }\n      currencyString += currencySymbol;\n    }\n    return currencyString;\n  }\n  window.formatCurrency = formatCurrency;\n  window.confirmDelete = function (route, id) {\n    var reloadPage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        $.ajax({\n          url: route,\n          type: 'GET',\n          data: {\n            ids: id,\n            _token: document.querySelector('meta[name=\"csrf-token\"]').content\n          },\n          success: function success(response) {\n            Swal.fire('Deleted!', 'Record has been deleted.', 'success').then(function (result) {\n              if (reloadPage) {\n                location.reload();\n              }\n            });\n          },\n          error: function error(xhr) {\n            Swal.fire('Error!', 'An error occurred while deleting the record.', 'error');\n            console.error(xhr.responseText);\n          }\n        });\n      }\n    });\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/app.js"]();
/******/ 	
/******/ })()
;